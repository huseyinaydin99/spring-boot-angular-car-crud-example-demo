{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, Input, NgModule, Optional, ViewEncapsulation } from '@angular/core';\nimport { MatCommonModule, MatLine, MatLineModule, MatLineSetter } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToString(value) {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToNumber(value) {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatGridTile {\n  /**\n   * @param {?} _element\n   */\n  constructor(_element) {\n    this._element = _element;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /**\n   * Amount of rows that the grid tile takes up.\n   * @return {?}\n   */\n  get rowspan() {\n    return this._rowspan;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set rowspan(value) {\n    this._rowspan = coerceToNumber(value);\n  }\n  /**\n   * Amount of columns that the grid tile takes up.\n   * @return {?}\n   */\n  get colspan() {\n    return this._colspan;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set colspan(value) {\n    this._colspan = coerceToNumber(value);\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   * @param {?} property\n   * @param {?} value\n   * @return {?}\n   */\n  _setStyle(property, value) {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n/** @nocollapse */\n\nclass MatGridTileText {\n  /**\n   * @param {?} _element\n   */\n  constructor(_element) {\n    this._element = _element;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {}\n\n/** @nocollapse */\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {}\n\n/** @nocollapse */\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n  /**\n   * @param {?} numColumns\n   * @param {?} tiles\n   */\n  constructor(numColumns, tiles) {\n    /**\n     * Index at which the search for the next gap will start.\n     */\n    this.columnIndex = 0;\n    /**\n     * The current row index.\n     */\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n  /**\n   * Gets the total number of rows occupied by tiles\n   * @return {?}\n   */\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   * @return {?}\n   */\n  get rowspan() {\n    let /** @type {?} */lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /**\n   * Calculates the row and col position of a tile.\n   * @param {?} tile\n   * @return {?}\n   */\n  _trackTile(tile) {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */gapStartIndex = this._findMatchingGap(tile.colspan);\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /**\n   * Finds the next available space large enough to fit the tile.\n   * @param {?} tileCols\n   * @return {?}\n   */\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    }\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */gapStartIndex = -1;\n    let /** @type {?} */gapEndIndex = -1;\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n  /**\n   * Move \"down\" to the next row.\n   * @return {?}\n   */\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++;\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   * @param {?} gapStartIndex\n   * @return {?}\n   */\n  _findGapEndIndex(gapStartIndex) {\n    for (let /** @type {?} */i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n  /**\n   * Update the tile tracker to account for the given tile in the given space.\n   * @param {?} start\n   * @param {?} tile\n   * @return {?}\n   */\n  _markTilePosition(start, tile) {\n    for (let /** @type {?} */i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n  /**\n   * @param {?} row\n   * @param {?} col\n   */\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n  constructor() {\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param {?} gutterSize Size of the grid's gutter.\n   * @param {?} tracker Instance of the TileCoordinator.\n   * @param {?} cols Amount of columns in the grid.\n   * @param {?} direction Layout direction of the grid.\n   * @return {?}\n   */\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param {?} offset Number of tiles that have already been rendered in the row/column.\n   * @return {?} Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param {?} span The tile's rowspan or colspan.\n   * @return {?} Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param {?} tile Tile to which to apply the styling.\n   * @param {?} rowIndex Index of the tile's row.\n   * @param {?} colIndex Index of the tile's column.\n   * @return {?}\n   */\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */percentWidthPerTile = 100 / this._cols;\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /**\n   * Sets the horizontal placement of the tile in the list.\n   * @param {?} tile\n   * @param {?} colIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    let /** @type {?} */baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   * @return {?}\n   */\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param {?} tileHeight Height of the tile.\n   * @return {?}\n   */\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * \\@docs-private\n   * @return {?}\n   */\n  getComputedHeight() {\n    return null;\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n  /**\n   * @param {?} fixedRowHeight\n   */\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n  /**\n   * @param {?} gutterSize\n   * @param {?} tracker\n   * @param {?} cols\n   * @param {?} direction\n   * @return {?}\n   */\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @return {?}\n   */\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n  /**\n   * @return {?}\n   */\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n  reset(list) {\n    list._setListStyle(['height', null]);\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n  /**\n   * @param {?} value\n   */\n  constructor(value) {\n    super();\n    this._parseRatio(value);\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    let /** @type {?} */percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n  /**\n   * @return {?}\n   */\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  _parseRatio(value) {\n    const /** @type {?} */ratioParts = value.split(':');\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @return {?}\n   */\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */percentHeightPerTile = 100 / this._rowspan;\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */gutterHeightPerTile = (this._rows - 1) / this._rows;\n    // Base vertical size of a column.\n    let /** @type {?} */baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n  reset(list) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n  return value.match(/px|em|rem/) ? value : value + 'px';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n  /**\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  constructor(_element, _dir) {\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     */\n    this._gutter = '1px';\n  }\n  /**\n   * Amount of columns in the grid list.\n   * @return {?}\n   */\n  get cols() {\n    return this._cols;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set cols(value) {\n    this._cols = coerceToNumber(value);\n  }\n  /**\n   * Size of the grid list's gutter in pixels.\n   * @return {?}\n   */\n  get gutterSize() {\n    return this._gutter;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set gutterSize(value) {\n    this._gutter = coerceToString(value);\n  }\n  /**\n   * Set internal representation of row height from the user-provided value.\n   * @param {?} value\n   * @return {?}\n   */\n  set rowHeight(value) {\n    const /** @type {?} */newValue = coerceToString(value);\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /**\n   * Throw a friendly error if cols property is missing\n   * @return {?}\n   */\n  _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /**\n   * Default to equal width:height if rowHeight property is missing\n   * @return {?}\n   */\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /**\n   * Creates correct Tile Styler subtype based on rowHeight passed in by user\n   * @param {?} rowHeight\n   * @return {?}\n   */\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /**\n   * Computes and applies the size and position for all children grid tiles.\n   * @return {?}\n   */\n  _layoutTiles() {\n    const /** @type {?} */tracker = new TileCoordinator(this.cols, this._tiles);\n    const /** @type {?} */direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n    this._tiles.forEach((tile, index) => {\n      const /** @type {?} */pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /**\n   * Sets style on the main grid-list element, given the style name and value.\n   * @param {?} style\n   * @return {?}\n   */\n  _setListStyle(style) {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatGridListModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler };\n//# sourceMappingURL=grid-list.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}