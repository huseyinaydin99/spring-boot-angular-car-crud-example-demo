{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, NgModule, Optional, ViewEncapsulation } from '@angular/core';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { MatCommonModule, mixinColor } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n/**\n * \\@docs-private\n */\nclass MatProgressSpinnerBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} platform\n   * @param {?} _document\n   */\n  constructor(_elementRef, platform, _document) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._document = _document;\n    this._value = 0;\n    this._fallbackAnimation = false;\n    /**\n     * The width and height of the host element. Will grow with stroke width.\n     */\n    this._elementSize = BASE_SIZE;\n    this._diameter = BASE_SIZE;\n    /**\n     * Mode of the progress circle\n     */\n    this.mode = 'determinate';\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const /** @type {?} */animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n  /**\n   * The diameter of the progress spinner (will set width and height of svg).\n   * @return {?}\n   */\n  get diameter() {\n    return this._diameter;\n  }\n  /**\n   * @param {?} size\n   * @return {?}\n   */\n  set diameter(size) {\n    this._diameter = coerceNumberProperty(size);\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  /**\n   * Stroke width of the progress spinner.\n   * @return {?}\n   */\n  get strokeWidth() {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set strokeWidth(value) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n  /**\n   * Value of the progress circle.\n   * @return {?}\n   */\n  get value() {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  set value(newValue) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (changes[\"strokeWidth\"] || changes[\"diameter\"]) {\n      this._updateElementSize();\n    }\n  }\n  /**\n   * The radius of the spinner, adjusted for stroke width.\n   * @return {?}\n   */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n  /**\n   * The view box of the spinner's svg element.\n   * @return {?}\n   */\n  get _viewBox() {\n    const /** @type {?} */viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n  /**\n   * The stroke circumference of the svg circle.\n   * @return {?}\n   */\n  get _strokeCircumference() {\n    return 2 * Math.PI * this._circleRadius;\n  }\n  /**\n   * The dash offset of the svg circle.\n   * @return {?}\n   */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n    return null;\n  }\n  /**\n   * Stroke width of the circle in percent.\n   * @return {?}\n   */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n  /**\n   * Dynamically generates a style tag containing the correct animation for this diameter.\n   * @return {?}\n   */\n  _attachStyleNode() {\n    let /** @type {?} */styleTag = MatProgressSpinner.styleTag;\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n    if (styleTag && styleTag.sheet) {\n      /** @type {?} */styleTag.sheet.insertRule(this._getAnimationText(), 0);\n    }\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n  /**\n   * Generates animation styles adjusted for the spinner's diameter.\n   * @return {?}\n   */\n  _getAnimationText() {\n    return INDETERMINATE_ANIMATION_TEMPLATE.replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`).replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`).replace(/DIAMETER/g, `${this.diameter}`);\n  }\n  /**\n   * Updates the spinner element size based on its diameter.\n   * @return {?}\n   */\n  _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n */\nMatProgressSpinner.diameters = new Set([BASE_SIZE]);\n/**\n * Used for storing all of the generated keyframe animations.\n * \\@dynamic\n */\nMatProgressSpinner.styleTag = null;\n\n/** @nocollapse */\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n  /**\n   * @param {?} elementRef\n   * @param {?} platform\n   * @param {?} document\n   */\n  constructor(elementRef, platform, document) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatProgressSpinnerModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatProgressSpinnerModule, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MatProgressSpinner, MatSpinner };\n//# sourceMappingURL=progress-spinner.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}