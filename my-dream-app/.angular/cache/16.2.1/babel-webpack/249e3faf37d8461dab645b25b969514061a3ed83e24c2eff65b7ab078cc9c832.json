{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, Host, Input, NgModule, Optional, TemplateRef, ViewContainerRef, ViewEncapsulation } from '@angular/core';\nimport { UNIQUE_SELECTION_DISPATCHER_PROVIDER, UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { CdkAccordion, CdkAccordionItem, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { A11yModule, FocusMonitor } from '@angular/cdk/a11y';\nimport { PortalModule, TemplatePortal } from '@angular/cdk/portal';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs/Subject';\nimport { take } from 'rxjs/operators/take';\nimport { filter } from 'rxjs/operators/filter';\nimport { startWith } from 'rxjs/operators/startWith';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { merge } from 'rxjs/observable/merge';\nimport { Subscription } from 'rxjs/Subscription';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n  constructor() {\n    super(...arguments);\n    this._hideToggle = false;\n    /**\n     * The display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the reset of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    this.displayMode = 'default';\n  }\n  /**\n   * Whether the expansion indicator should be hidden.\n   * @return {?}\n   */\n  get hideToggle() {\n    return this._hideToggle;\n  }\n  /**\n   * @param {?} show\n   * @return {?}\n   */\n  set hideToggle(show) {\n    this._hideToggle = coerceBooleanProperty(show);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n  /**\n   * @param {?} _template\n   */\n  constructor(_template) {\n    this._template = _template;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Time and timing curve for expansion panel animations.\n */\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n */\nconst matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [state('collapsed', style({\n    height: '{{collapsedHeight}}'\n  }), {\n    params: {\n      collapsedHeight: '48px'\n    }\n  }), state('expanded', style({\n    height: '{{expandedHeight}}'\n  }), {\n    params: {\n      expandedHeight: '64px'\n    }\n  }), transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Counter for generating unique element ids.\n */\nlet uniqueId = 0;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _uniqueSelectionDispatcher\n   * @param {?} _viewContainerRef\n   */\n  constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this._viewContainerRef = _viewContainerRef;\n    this._hideToggle = false;\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     */\n    this._inputChanges = new Subject();\n    /**\n     * ID for the associated header element. Used for a11y labelling.\n     */\n    this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n    this.accordion = accordion;\n  }\n  /**\n   * Whether the toggle indicator should be hidden.\n   * @return {?}\n   */\n  get hideToggle() {\n    return this._hideToggle;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set hideToggle(value) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the expansion indicator should be hidden.\n   * @return {?}\n   */\n  _getHideToggle() {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n  /**\n   * Determines whether the expansion panel should have spacing between it and its siblings.\n   * @return {?}\n   */\n  _hasSpacing() {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n  /**\n   * Gets the expanded state string.\n   * @return {?}\n   */\n  _getExpandedState() {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(startWith( /** @type {?} */null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    this._inputChanges.next(changes);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _bodyAnimation(event) {\n    const /** @type {?} */classList = event.element.classList;\n    const /** @type {?} */cssClass = 'mat-expanded';\n    const {\n      phaseName,\n      toState\n    } = event;\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n/** @nocollapse */\n\nclass MatExpansionPanelActionRow {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n  /**\n   * @param {?} panel\n   * @param {?} _element\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   */\n  constructor(panel, _element, _focusMonitor, _changeDetectorRef) {\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter(changes => !!(changes[\"hideToggle\"] || changes[\"disabled\"])))).subscribe(() => this._changeDetectorRef.markForCheck());\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n  /**\n   * Toggles the expanded state of the panel.\n   * @return {?}\n   */\n  _toggle() {\n    this.panel.toggle();\n  }\n  /**\n   * Gets whether the panel is expanded.\n   * @return {?}\n   */\n  _isExpanded() {\n    return this.panel.expanded;\n  }\n  /**\n   * Gets the expanded state string of the panel.\n   * @return {?}\n   */\n  _getExpandedState() {\n    return this.panel._getExpandedState();\n  }\n  /**\n   * Gets the panel id.\n   * @return {?}\n   */\n  _getPanelId() {\n    return this.panel.id;\n  }\n  /**\n   * Gets whether the expand indicator should be shown.\n   * @return {?}\n   */\n  _showToggle() {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n  /**\n   * Handle keydown event calling to toggle() if appropriate.\n   * @param {?} event\n   * @return {?}\n   */\n  _keydown(event) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelDescription {}\n\n/** @nocollapse */\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelTitle {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatExpansionModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatExpansionModule, MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };\n//# sourceMappingURL=expansion.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}