{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ElementRef, NgModule, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule, MatRipple, MatRippleModule, mixinColor, mixinDisableRipple, mixinDisabled } from '@angular/material/core';\nimport { A11yModule, FocusMonitor } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Default color palette for flat buttons (mat-flat-button)\n */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = ['mat-button', 'mat-flat-button', 'mat-icon-button', 'mat-raised-button', 'mat-stroked-button', 'mat-mini-fab', 'mat-fab'];\n/**\n * \\@docs-private\n */\nclass MatButtonBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nclass MatButton extends _MatButtonMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _platform\n   * @param {?} _focusMonitor\n   */\n  constructor(elementRef, _platform, _focusMonitor) {\n    super(elementRef);\n    this._platform = _platform;\n    this._focusMonitor = _focusMonitor;\n    /**\n     * Whether the button is round.\n     */\n    this._isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n    /**\n     * Whether the button is icon button.\n     */\n    this._isIconButton = this._hasHostAttributes('mat-icon-button');\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const /** @type {?} */attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        /** @type {?} */elementRef.nativeElement.classList.add(attr);\n      }\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n  /**\n   * Focuses the button.\n   * @return {?}\n   */\n  focus() {\n    this._getHostElement().focus();\n  }\n  /**\n   * @return {?}\n   */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /**\n   * @return {?}\n   */\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /**\n   * Gets whether the button has one of the given attributes.\n   * @param {...?} attributes\n   * @return {?}\n   */\n  _hasHostAttributes(...attributes) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Raised Material design button.\n */\nclass MatAnchor extends MatButton {\n  /**\n   * @param {?} platform\n   * @param {?} focusMonitor\n   * @param {?} elementRef\n   */\n  constructor(platform, focusMonitor, elementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _haltDisabledEvents(event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatButtonModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatButtonModule, MatButtonBase, _MatButtonMixinBase, MatButton, MatAnchor };\n//# sourceMappingURL=button.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}