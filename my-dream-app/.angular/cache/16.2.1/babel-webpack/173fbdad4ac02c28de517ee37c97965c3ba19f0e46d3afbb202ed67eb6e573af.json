{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n  return t;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [0, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar okta_config_1 = require(\"../models/okta.config\");\nvar packageInfo_1 = require(\"../packageInfo\");\n/**\n * Import the okta-auth-js library\n */\nvar OktaAuth = require(\"@okta/okta-auth-js\");\nvar Observable_1 = require(\"rxjs/Observable\");\nvar OktaAuthService = /** @class */function () {\n  function OktaAuthService(auth, router) {\n    var _this = this;\n    this.auth = auth;\n    this.router = router;\n    var missing = [];\n    if (!auth.issuer) {\n      missing.push('issuer');\n    }\n    if (!auth.clientId) {\n      missing.push('clientId');\n    }\n    if (!auth.redirectUri) {\n      missing.push('redirectUri');\n    }\n    if (missing.length) {\n      throw new Error(missing.join(', ') + \" must be defined\");\n    }\n    this.observers = [];\n    this.oktaAuth = new OktaAuth({\n      url: auth.issuer.split('/oauth2/')[0],\n      clientId: auth.clientId,\n      issuer: auth.issuer,\n      redirectUri: auth.redirectUri\n    });\n    this.oktaAuth.userAgent = packageInfo_1.default.name + \"/\" + packageInfo_1.default.version + \" \" + this.oktaAuth.userAgent;\n    /**\n     * Scrub scopes to ensure 'openid' is included\n     */\n    auth.scope = this.scrubScopes(auth.scope);\n    /**\n     * Cache the auth config.\n     */\n    this.config = auth;\n    this.$authenticationState = new Observable_1.Observable(function (observer) {\n      _this.observers.push(observer);\n    });\n  }\n  /**\n   * Checks if there is an access token and id token\n   */\n  OktaAuthService.prototype.isAuthenticated = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, idToken;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAccessToken()];\n          case 1:\n            accessToken = _a.sent();\n            return [4 /*yield*/, this.getIdToken()];\n          case 2:\n            idToken = _a.sent();\n            return [2 /*return*/, !!(accessToken || idToken)];\n        }\n      });\n    });\n  };\n  OktaAuthService.prototype.emitAuthenticationState = function (state) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.observers.forEach(function (observer) {\n          return observer.next(state);\n        });\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * Returns the current accessToken in the tokenManager.\n   */\n  OktaAuthService.prototype.getAccessToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken;\n      return __generator(this, function (_a) {\n        accessToken = this.oktaAuth.tokenManager.get('accessToken');\n        return [2 /*return*/, accessToken ? accessToken.accessToken : undefined];\n      });\n    });\n  };\n  /**\n   * Returns the current idToken in the tokenManager.\n   */\n  OktaAuthService.prototype.getIdToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var idToken;\n      return __generator(this, function (_a) {\n        idToken = this.oktaAuth.tokenManager.get('idToken');\n        return [2 /*return*/, idToken ? idToken.idToken : undefined];\n      });\n    });\n  };\n  /**\n   * Returns user claims from the /userinfo endpoint if an\n   * accessToken is provided or parses the available idToken.\n   */\n  OktaAuthService.prototype.getUser = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, idToken, userinfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            accessToken = this.oktaAuth.tokenManager.get('accessToken');\n            idToken = this.oktaAuth.tokenManager.get('idToken');\n            if (!(accessToken && idToken)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.oktaAuth.token.getUserInfo(accessToken)];\n          case 1:\n            userinfo = _a.sent();\n            if (userinfo.sub === idToken.claims.sub) {\n              // Only return the userinfo response if subjects match to\n              // mitigate token substitution attacks\n              return [2 /*return*/, userinfo];\n            }\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, idToken ? idToken.claims : undefined];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the configuration object used.\n   */\n  OktaAuthService.prototype.getOktaConfig = function () {\n    return this.config;\n  };\n  /**\n   * Launches the login redirect.\n   * @param fromUri\n   * @param additionalParams\n   */\n  OktaAuthService.prototype.loginRedirect = function (fromUri, additionalParams) {\n    if (fromUri) {\n      this.setFromUri(fromUri);\n    }\n    this.oktaAuth.token.getWithRedirect(__assign({\n      responseType: (this.config.responseType || 'id_token token').split(' '),\n      // Convert scopes to list of strings\n      scopes: this.config.scope.split(' ')\n    }, additionalParams));\n  };\n  /**\n   * Stores the intended path to redirect after successful login.\n   * @param uri\n   * @param queryParams\n   */\n  OktaAuthService.prototype.setFromUri = function (uri, queryParams) {\n    var json = JSON.stringify({\n      uri: uri,\n      params: queryParams\n    });\n    localStorage.setItem('referrerPath', json);\n  };\n  /**\n   * Returns the referrer path from localStorage or app root.\n   */\n  OktaAuthService.prototype.getFromUri = function () {\n    var referrerPath = localStorage.getItem('referrerPath');\n    localStorage.removeItem('referrerPath');\n    var path = JSON.parse(referrerPath) || {\n      uri: '/',\n      params: {}\n    };\n    var navigationExtras = {\n      queryParams: path.params\n    };\n    return {\n      uri: path.uri,\n      extras: navigationExtras\n    };\n  };\n  /**\n   * Parses the tokens from the callback URL.\n   */\n  OktaAuthService.prototype.handleAuthentication = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      var tokens, fromUri;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.oktaAuth.token.parseFromUrl()];\n          case 1:\n            tokens = _a.sent();\n            tokens.forEach(function (token) {\n              if (token.idToken) {\n                _this.oktaAuth.tokenManager.add('idToken', token);\n              }\n              if (token.accessToken) {\n                _this.oktaAuth.tokenManager.add('accessToken', token);\n              }\n            });\n            return [4 /*yield*/, this.isAuthenticated()];\n          case 2:\n            if (_a.sent()) {\n              this.emitAuthenticationState(true);\n            }\n            fromUri = this.getFromUri();\n            this.router.navigate([fromUri.uri], fromUri.extras);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Clears the user session in Okta and removes\n   * tokens stored in the tokenManager.\n   * @param uri\n   */\n  OktaAuthService.prototype.logout = function (uri) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.oktaAuth.tokenManager.clear();\n            return [4 /*yield*/, this.oktaAuth.signOut()];\n          case 1:\n            _a.sent();\n            this.emitAuthenticationState(false);\n            this.router.navigate([uri || '/']);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Scrub scopes to ensure 'openid' is included\n   * @param scopes\n   */\n  OktaAuthService.prototype.scrubScopes = function (scopes) {\n    if (!scopes) {\n      return 'openid email';\n    }\n    if (scopes.indexOf('openid') === -1) {\n      return scopes + ' openid';\n    }\n    return scopes;\n  };\n  OktaAuthService.decorators = [{\n    type: core_1.Injectable\n  }];\n  /** @nocollapse */\n  OktaAuthService.ctorParameters = function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: core_1.Inject,\n        args: [okta_config_1.OKTA_CONFIG]\n      }]\n    }, {\n      type: router_1.Router\n    }];\n  };\n  return OktaAuthService;\n}();\nexports.OktaAuthService = OktaAuthService;\n//# sourceMappingURL=okta.service.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}