{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, Directive, EventEmitter, Input, NgModule, Optional, Output } from '@angular/core';\nimport { UNIQUE_SELECTION_DISPATCHER_PROVIDER, UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Used to generate unique ID for each accordion.\n */\nlet nextId$1 = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n  constructor() {\n    /**\n     * A readonly id value to use for unique selection coordination.\n     */\n    this.id = `cdk-accordion-${nextId$1++}`;\n    this._multi = false;\n  }\n  /**\n   * Whether the accordion should allow multiple expanded accordion items simultaneously.\n   * @return {?}\n   */\n  get multi() {\n    return this._multi;\n  }\n  /**\n   * @param {?} multi\n   * @return {?}\n   */\n  set multi(multi) {\n    this._multi = coerceBooleanProperty(multi);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion item.\n */\nlet nextId = 0;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _expansionDispatcher\n   */\n  constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n    this.accordion = accordion;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._expansionDispatcher = _expansionDispatcher;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     */\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     */\n    this.opened = new EventEmitter();\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     */\n    this.destroyed = new EventEmitter();\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * \\@docs-private\n     */\n    this.expandedChange = new EventEmitter();\n    /**\n     * The unique AccordionItem id.\n     */\n    this.id = `cdk-accordion-child-${nextId++}`;\n    this._expanded = false;\n    this._disabled = false;\n    /**\n     * Unregister function for _expansionDispatcher.\n     */\n    this._removeUniqueSelectionListener = () => {};\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n      if (this.accordion && !this.accordion.multi && this.accordion.id === accordionId && this.id !== id) {\n        this.expanded = false;\n      }\n    });\n  }\n  /**\n   * Whether the AccordionItem is expanded.\n   * @return {?}\n   */\n  get expanded() {\n    return this._expanded;\n  }\n  /**\n   * @param {?} expanded\n   * @return {?}\n   */\n  set expanded(expanded) {\n    expanded = coerceBooleanProperty(expanded);\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const /** @type {?} */accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the AccordionItem is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} disabled\n   * @return {?}\n   */\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  /**\n   * Emits an event for the accordion item being destroyed.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n  /**\n   * Toggles the expanded state of the accordion item.\n   * @return {?}\n   */\n  toggle() {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n  /**\n   * Sets the expanded state of the accordion item to false.\n   * @return {?}\n   */\n  close() {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n  /**\n   * Sets the expanded state of the accordion item to true.\n   * @return {?}\n   */\n  open() {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass CdkAccordionModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\n//# sourceMappingURL=accordion.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}