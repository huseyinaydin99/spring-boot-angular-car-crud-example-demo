{"ast":null,"code":"import { __awaiter, __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Injectable, Inject, Optional, Component, Injector, NgModule } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { OktaAuth, isAbsoluteUrl, toAbsoluteUrl, toRelativeUrl } from '@okta/okta-auth-js';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst OKTA_CONFIG = new InjectionToken('okta.config.angular');\nvar packageInfo = {\n  'name': '@okta/okta-angular',\n  'version': '3.2.2'\n};\n\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nlet OktaAuthService = /*#__PURE__*/(() => {\n  let OktaAuthService = class OktaAuthService extends OktaAuth {\n    constructor(config, location, router) {\n      // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.\n      if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {\n        const baseUri = window.location.origin + location.prepareExternalUrl('');\n        config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);\n      }\n      const transformAuthState = (oktaAuth, authState) => __awaiter(this, void 0, void 0, function* () {\n        // if `isAuthenticated` was set on config, call it now to override the value of `authState.isAuthenticated`\n        if (config.isAuthenticated) {\n          authState.isAuthenticated = yield config.isAuthenticated(this);\n        }\n        // if `transformAuthState` was set on config, call it now to transform the authState object\n        if (config.transformAuthState) {\n          authState = yield config.transformAuthState(oktaAuth, authState);\n        }\n        return authState;\n      });\n      // If a router is available, provide a default implementation of `restoreOriginalUri`\n      const restoreOriginalUri = !config.restoreOriginalUri && router && location ? (oktaAuth, originalUri) => __awaiter(this, void 0, void 0, function* () {\n        const baseUrl = window.location.origin + location.prepareExternalUrl('');\n        const routePath = toRelativeUrl(originalUri || '/', baseUrl);\n        return router.navigateByUrl(routePath);\n      }) : config.restoreOriginalUri;\n      const options = Object.assign({\n        transformAuthState,\n        restoreOriginalUri\n      }, config);\n      super(options);\n      this.config = config;\n      this.location = location;\n      // Customize user agent\n      this.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.userAgent}`;\n      // Initialize observers\n      this.observers = [];\n      this.$authenticationState = new Observable(observer => {\n        this.observers.push(observer);\n      });\n      this.authStateManager.subscribe(authState => {\n        this.emitAuthenticationState(!!authState.isAuthenticated);\n      });\n      if (!this.token.isLoginRedirect()) {\n        // Trigger an initial change event to make sure authState is latest\n        this.authStateManager.updateAuthState();\n      }\n      // Start the token auto-renew service\n      this.tokenManager.start();\n    }\n    ngOnDestroy() {\n      this.stop();\n    }\n    emitAuthenticationState(state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.observers.forEach(observer => observer.next(state));\n      });\n    }\n    isAuthenticated() {\n      const _super = Object.create(null, {\n        isAuthenticated: {\n          get: () => super.isAuthenticated\n        }\n      });\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.config.isAuthenticated) {\n          return yield this.config.isAuthenticated(this);\n        }\n        return yield _super.isAuthenticated.call(this);\n      });\n    }\n    signInWithRedirect(options = {}) {\n      const _super = Object.create(null, {\n        signInWithRedirect: {\n          get: () => super.signInWithRedirect\n        }\n      });\n      return __awaiter(this, void 0, void 0, function* () {\n        const originalUri = options.originalUri || this.getOriginalUri();\n        if (!originalUri) {\n          // Default to the app base as a relative path.\n          options.originalUri = '/';\n        }\n        return _super.signInWithRedirect.call(this, options);\n      });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\n    signOut(options) {\n      const _super = Object.create(null, {\n        signOut: {\n          get: () => super.signOut\n        }\n      });\n      return __awaiter(this, void 0, void 0, function* () {\n        options = options || {};\n        const postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;\n        if (!postLogoutRedirectUri && this.location) {\n          // Default to the app base as an absolute URL, including base href, if any.\n          options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash\n        }\n\n        return _super.signOut.call(this, options);\n      });\n    }\n    /**\n     * Returns the configuration object used.\n     */\n    getOktaConfig() {\n      return this.config;\n    }\n  };\n  OktaAuthService = __decorate([Injectable(), __param(0, Inject(OKTA_CONFIG)), __param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [Object, Location, Router])], OktaAuthService);\n\n  /*\n   * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n   *\n   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *\n   * See the License for the specific language governing permissions and limitations under the License.\n   */\n  return OktaAuthService;\n})();\nlet OktaCallbackComponent = /*#__PURE__*/(() => {\n  let OktaCallbackComponent = class OktaCallbackComponent {\n    constructor(okta, router, injector) {\n      this.okta = okta;\n      this.router = router;\n      this.injector = injector;\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri\n          yield this.okta.handleLoginRedirect();\n        } catch (e) {\n          // Callback from social IDP. Show custom login page to continue.\n          if (this.okta.isInteractionRequiredError(e) && this.injector) {\n            const {\n              onAuthResume,\n              onAuthRequired\n            } = this.okta.getOktaConfig();\n            const callbackFn = onAuthResume || onAuthRequired;\n            if (callbackFn) {\n              callbackFn(this.okta, this.injector);\n              return;\n            }\n          }\n          this.error = e.toString();\n        }\n      });\n    }\n  };\n  OktaCallbackComponent = __decorate([Component({\n    template: `<div>{{error}}</div>`\n  }), __param(2, Optional()), __metadata(\"design:paramtypes\", [OktaAuthService, Router, Injector])], OktaCallbackComponent);\n\n  /*\n   * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n   *\n   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *\n   * See the License for the specific language governing permissions and limitations under the License.\n   */\n  return OktaCallbackComponent;\n})();\nlet OktaLoginRedirectComponent = /*#__PURE__*/(() => {\n  let OktaLoginRedirectComponent = class OktaLoginRedirectComponent {\n    constructor(okta) {\n      this.okta = okta;\n    }\n    ngOnInit() {\n      const originalUri = this.okta.getOriginalUri();\n      if (!originalUri) {\n        this.okta.setOriginalUri('/');\n      }\n      this.okta.signInWithRedirect();\n    }\n  };\n  OktaLoginRedirectComponent = __decorate([Component({\n    template: ``\n  }), __metadata(\"design:paramtypes\", [OktaAuthService])], OktaLoginRedirectComponent);\n\n  /*\n   * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n   *\n   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *\n   * See the License for the specific language governing permissions and limitations under the License.\n   */\n  return OktaLoginRedirectComponent;\n})();\nlet OktaAuthGuard = /*#__PURE__*/(() => {\n  let OktaAuthGuard = class OktaAuthGuard {\n    constructor(oktaAuth, injector) {\n      this.oktaAuth = oktaAuth;\n      this.injector = injector;\n      this.updateAuthStateListener = authState => {\n        if (!authState.isAuthenticated) {\n          this.handleLogin(this.state.url);\n        }\n      };\n      // Unsubscribe updateAuthStateListener when route change\n      const router = injector.get(Router);\n      router.events.pipe(filter(e => e instanceof NavigationStart && this.state && this.state.url !== e.url)).subscribe(() => {\n        this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);\n      });\n    }\n    /**\n     * Gateway for protected route. Returns true if there is a valid accessToken,\n     * otherwise it will cache the route and start the login flow.\n     * @param route\n     * @param state\n     */\n    canActivate(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Track states for current route\n        this.route = route;\n        this.state = state;\n        // Protect the route after accessing\n        this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);\n        const isAuthenticated = yield this.oktaAuth.isAuthenticated();\n        if (isAuthenticated) {\n          return true;\n        }\n        yield this.handleLogin(state.url);\n        return false;\n      });\n    }\n    canActivateChild(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.canActivate(route, state);\n      });\n    }\n    handleLogin(fromUri) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Get the operation to perform on failed authentication from\n        // either the global config or route data injection.\n        const onAuthRequired = this.route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;\n        // Store the current path\n        this.oktaAuth.setOriginalUri(fromUri);\n        if (onAuthRequired) {\n          onAuthRequired(this.oktaAuth, this.injector);\n        } else {\n          this.oktaAuth.signInWithRedirect();\n        }\n      });\n    }\n  };\n  OktaAuthGuard = __decorate([Injectable(), __metadata(\"design:paramtypes\", [OktaAuthService, Injector])], OktaAuthGuard);\n  return OktaAuthGuard;\n})();\nfunction createOktaService(config, location, router) {\n  return new OktaAuthService(config, location, router);\n}\n\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst ɵ0 = createOktaService;\nlet OktaAuthModule = /*#__PURE__*/(() => {\n  let OktaAuthModule = class OktaAuthModule {};\n  OktaAuthModule = __decorate([NgModule({\n    declarations: [OktaCallbackComponent, OktaLoginRedirectComponent],\n    exports: [OktaCallbackComponent, OktaLoginRedirectComponent],\n    providers: [OktaAuthGuard, {\n      provide: OktaAuthService,\n      useFactory: ɵ0,\n      deps: [OKTA_CONFIG, Location, Router // optional\n      ]\n    }]\n  })], OktaAuthModule);\n  return OktaAuthModule;\n})();\nexport { OKTA_CONFIG, OktaAuthGuard, OktaAuthModule, OktaAuthService, OktaCallbackComponent, OktaLoginRedirectComponent, createOktaService as ɵa };\n//# sourceMappingURL=okta-angular.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}