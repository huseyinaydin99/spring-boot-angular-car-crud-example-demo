{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { A11yModule, FocusMonitor } from '@angular/cdk/a11y';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CdkStep, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, Inject, Injectable, Input, NgModule, Optional, SkipSelf, TemplateRef, ViewChildren, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs/Subject';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatStepLabel extends CdkStepLabel {\n  /**\n   * @param {?} template\n   */\n  constructor(template) {\n    super(template);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Stepper data that is required for internationalization.\n */\nclass MatStepperIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * Label that is rendered below optional steps.\n     */\n    this.optionalLabel = 'Optional';\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatStepHeader {\n  /**\n   * @param {?} _intl\n   * @param {?} _focusMonitor\n   * @param {?} _element\n   * @param {?} changeDetectorRef\n   */\n  constructor(_intl, _focusMonitor, _element, changeDetectorRef) {\n    this._intl = _intl;\n    this._focusMonitor = _focusMonitor;\n    this._element = _element;\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n  /**\n   * Index of the given step.\n   * @return {?}\n   */\n  get index() {\n    return this._index;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set index(value) {\n    this._index = coerceNumberProperty(value);\n  }\n  /**\n   * Whether the given step is selected.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the given step label is active.\n   * @return {?}\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set active(value) {\n    this._active = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the given step is optional.\n   * @return {?}\n   */\n  get optional() {\n    return this._optional;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set optional(value) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n  /**\n   * Returns string label of given step if it is a text label.\n   * @return {?}\n   */\n  _stringLabel() {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n  /**\n   * Returns MatStepLabel if the label of given step is a template label.\n   * @return {?}\n   */\n  _templateLabel() {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n  /**\n   * Returns the host HTML element.\n   * @return {?}\n   */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material steppers.\n */\nconst matStepperAnimations = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [state('previous', style({\n    transform: 'translate3d(-100%, 0, 0)',\n    visibility: 'hidden'\n  })), state('current', style({\n    transform: 'none',\n    visibility: 'visible'\n  })), state('next', style({\n    transform: 'translate3d(100%, 0, 0)',\n    visibility: 'hidden'\n  })), transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))]),\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [state('previous', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('next', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('current', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Template to be used to override the icons inside the step header.\n */\nclass MatStepperIcon {\n  /**\n   * @param {?} templateRef\n   */\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nconst _MatStep = CdkStep;\nconst _MatStepper = CdkStepper;\nclass MatStep extends CdkStep {\n  /**\n   * @param {?} stepper\n   * @param {?} _errorStateMatcher\n   */\n  constructor(stepper, _errorStateMatcher) {\n    super(stepper);\n    this._errorStateMatcher = _errorStateMatcher;\n  }\n  /**\n   * Custom error state matcher that additionally checks for validity of interacted form.\n   * @param {?} control\n   * @param {?} form\n   * @return {?}\n   */\n  isErrorState(control, form) {\n    const /** @type {?} */originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const /** @type {?} */customErrorState = !!(control && control.invalid && this.interacted);\n    return originalErrorState || customErrorState;\n  }\n}\n\n/** @nocollapse */\n\nclass MatStepper extends CdkStepper {\n  constructor() {\n    super(...arguments);\n    /**\n     * Consumer-specified template-refs to be used to override the header icons.\n     */\n    this._iconOverrides = {};\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    const /** @type {?} */icons = this._icons.toArray();\n    const /** @type {?} */editOverride = icons.find(icon => icon.name === 'edit');\n    const /** @type {?} */doneOverride = icons.find(icon => icon.name === 'done');\n    if (editOverride) {\n      this._iconOverrides[\"edit\"] = editOverride.templateRef;\n    }\n    if (doneOverride) {\n      this._iconOverrides[\"done\"] = doneOverride.templateRef;\n    }\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n/** @nocollapse */\n\nclass MatHorizontalStepper extends MatStepper {}\n\n/** @nocollapse */\n\nclass MatVerticalStepper extends MatStepper {\n  /**\n   * @param {?} dir\n   * @param {?} changeDetectorRef\n   */\n  constructor(dir, changeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nclass MatStepperNext extends CdkStepperNext {}\n\n/** @nocollapse */\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nclass MatStepperPrevious extends CdkStepperPrevious {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatStepperModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatStepperModule, MatStepLabel, _MatStep, _MatStepper, MatStep, MatStepper, MatHorizontalStepper, MatVerticalStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIntl, matStepperAnimations, MatStepperIcon };\n//# sourceMappingURL=stepper.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}