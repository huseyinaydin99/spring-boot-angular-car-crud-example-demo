{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Injector, Input, NgModule, Optional, SkipSelf, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CommonModule, DOCUMENT, Location } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, PortalModule, TemplatePortal } from '@angular/cdk/portal';\nimport { A11yModule, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { startWith } from 'rxjs/operators/startWith';\nimport { Subject } from 'rxjs/Subject';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { filter } from 'rxjs/operators/filter';\nimport { take } from 'rxjs/operators/take';\nimport { Subscription } from 'rxjs/Subscription';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Possible overrides for a dialog's position.\n * @record\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n  constructor() {\n    /**\n     * The ARIA role of the dialog element.\n     */\n    this.role = 'dialog';\n    /**\n     * Custom class for the overlay pane.\n     */\n    this.panelClass = '';\n    /**\n     * Whether the dialog has a backdrop.\n     */\n    this.hasBackdrop = true;\n    /**\n     * Custom class for the backdrop,\n     */\n    this.backdropClass = '';\n    /**\n     * Whether the user can use escape or clicking outside to close a modal.\n     */\n    this.disableClose = false;\n    /**\n     * Width of the dialog.\n     */\n    this.width = '';\n    /**\n     * Height of the dialog.\n     */\n    this.height = '';\n    /**\n     * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw\n     */\n    this.maxWidth = '80vw';\n    /**\n     * Data being injected into the child component.\n     */\n    this.data = null;\n    /**\n     * Layout direction for the dialog's content.\n     */\n    this.direction = 'ltr';\n    /**\n     * ID of the element that describes the dialog.\n     */\n    this.ariaDescribedBy = null;\n    /**\n     * Aria label to assign to the dialog element\n     */\n    this.ariaLabel = null;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     */\n    this.autoFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     */\n    this.closeOnNavigation = true;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by MatDialog.\n */\nconst matDialogAnimations = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n  // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n  // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n  // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n  // solves both issues.\n  state('enter', style({\n    transform: 'none',\n    opacity: 1\n  })), state('void', style({\n    transform: 'translate3d(0, 25%, 0) scale(0.9)',\n    opacity: 0\n  })), state('exit', style({\n    transform: 'translate3d(0, 25%, 0)',\n    opacity: 0\n  })), transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _changeDetectorRef\n   * @param {?} _document\n   */\n  constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._document = _document;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     */\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * State of the dialog animation.\n     */\n    this._state = 'enter';\n    /**\n     * Emits when an animation state changes.\n     */\n    this._animationStateChanged = new EventEmitter();\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     */\n    this._ariaLabelledBy = null;\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @template T\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @template C\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /**\n   * Moves the focus inside the focus trap.\n   * @return {?}\n   */\n  _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n  /**\n   * Restores focus to the element that was focused before the dialog opened.\n   * @return {?}\n   */\n  _restoreFocus() {\n    const /** @type {?} */toFocus = this._elementFocusedBeforeDialogWasOpened;\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /**\n   * Saves a reference to the element that was focused before the dialog was opened.\n   * @return {?}\n   */\n  _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */this._document.activeElement;\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n  /**\n   * Callback, invoked whenever an animation on the host completes.\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationDone(event) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Callback, invoked when an animation on the host starts.\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationStart(event) {\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Starts the dialog exit animation.\n   * @return {?}\n   */\n  _startExitAnimation() {\n    this._state = 'exit';\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} location\n   * @param {?=} id\n   */\n  constructor(_overlayRef, _containerInstance, location, id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n    this._afterOpen = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n    this._beforeClose = new Subject();\n    /**\n     * Subscription to changes in the user's location.\n     */\n    this._locationChanges = Subscription.EMPTY;\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'enter'), take(1)).subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = /** @type {?} */null;\n    });\n    _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose)).subscribe(() => this.close());\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n  close(dialogResult) {\n    this._result = dialogResult;\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1)).subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @return {?}\n   */\n  afterOpen() {\n    return this._afterOpen.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   * @return {?}\n   */\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @return {?}\n   */\n  beforeClose() {\n    return this._beforeClose.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   * @return {?}\n   */\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   * @return {?}\n   */\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @param {?=} position New dialog position.\n   * @return {?}\n   */\n  updatePosition(position) {\n    let /** @type {?} */strategy = this._getPositionStrategy();\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n    this._overlayRef.updatePosition();\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param {?=} width New width of the dialog.\n   * @param {?=} height New height of the dialog.\n   * @return {?}\n   */\n  updateSize(width = 'auto', height = 'auto') {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n  /**\n   * Fetches the position strategy object from the overlay ref.\n   * @return {?}\n   */\n  _getPositionStrategy() {\n    return (/** @type {?} */this._overlayRef.getConfig().positionStrategy\n    );\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n  /**\n   * @param {?} _overlay\n   * @param {?} _injector\n   * @param {?} _location\n   * @param {?} _defaultOptions\n   * @param {?} _scrollStrategy\n   * @param {?} _parentDialog\n   * @param {?} _overlayContainer\n   */\n  constructor(_overlay, _injector, _location, _defaultOptions, _scrollStrategy, _parentDialog, _overlayContainer) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._location = _location;\n    this._defaultOptions = _defaultOptions;\n    this._scrollStrategy = _scrollStrategy;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\n  }\n  /**\n   * Keeps track of the currently-open dialogs.\n   * @return {?}\n   */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @return {?}\n   */\n  get afterOpen() {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n  /**\n   * @return {?}\n   */\n  get _afterAllClosed() {\n    const /** @type {?} */parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n  /**\n   * Opens a modal dialog containing the given component.\n   * @template T, D\n   * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param {?=} config Extra configuration options.\n   * @return {?} Reference to the newly-opened dialog.\n   */\n  open(componentOrTemplateRef, config) {\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n    const /** @type {?} */overlayRef = this._createOverlay(config);\n    const /** @type {?} */dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   * @return {?}\n   */\n  closeAll() {\n    let /** @type {?} */i = this.openDialogs.length;\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param {?} id ID to use when looking up the dialog.\n   * @return {?}\n   */\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the OverlayRef for the created overlay.\n   */\n  _createOverlay(config) {\n    const /** @type {?} */overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param {?} dialogConfig The dialog configuration.\n   * @return {?} The overlay configuration.\n   */\n  _getOverlayConfig(dialogConfig) {\n    const /** @type {?} */state$$1 = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n    if (dialogConfig.backdropClass) {\n      state$$1.backdropClass = dialogConfig.backdropClass;\n    }\n    return state$$1;\n  }\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param {?} overlay Reference to the dialog's underlying overlay.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to a ComponentRef for the attached container.\n   */\n  _attachDialogContainer(overlay, config) {\n    let /** @type {?} */containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let /** @type {?} */containerRef = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @template T\n   * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */null, /** @type {?} */{\n        $implicit: config.data,\n        dialogRef\n      }));\n    } else {\n      const /** @type {?} */injector = this._createInjector(config, dialogRef, dialogContainer);\n      const /** @type {?} */contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n    return dialogRef;\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @template T\n   * @param {?} config Config object that is used to construct the dialog.\n   * @param {?} dialogRef Reference to the dialog.\n   * @param {?} dialogContainer\n   * @return {?} The custom injector that can be used inside the dialog.\n   */\n  _createInjector(config, dialogRef, dialogContainer) {\n    const /** @type {?} */userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */injectionTokens = new WeakMap();\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer).set(MAT_DIALOG_DATA, config.data).set(MatDialogRef, dialogRef);\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: of()\n      });\n    }\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param {?} dialogRef Dialog to be removed.\n   * @return {?}\n   */\n  _removeOpenDialog(dialogRef) {\n    const /** @type {?} */index = this.openDialogs.indexOf(dialogRef);\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   * @return {?}\n   */\n  _hideNonDialogContentFromAssistiveTechnology() {\n    const /** @type {?} */overlayContainer = this._overlayContainer.getContainerElement();\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const /** @type {?} */siblings = overlayContainer.parentElement.children;\n      for (let /** @type {?} */i = siblings.length - 1; i > -1; i--) {\n        let /** @type {?} */sibling = siblings[i];\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n  /**\n   * @param {?} dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /**\n     * Screenreader label for the button.\n     */\n    this.ariaLabel = 'Close dialog';\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = /** @type {?} */getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    const /** @type {?} */proxiedChange = changes[\"_matDialogClose\"] || changes[\"_matDialogCloseResult\"];\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n  /**\n   * @param {?} _dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(_dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = /** @type {?} */getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const /** @type {?} */container = this._dialogRef._containerInstance;\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {}\n\n/** @nocollapse */\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {}\n\n/** @nocollapse */\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n  let /** @type {?} */parent = element.nativeElement.parentElement;\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n  return parent ? openDialogs.find(dialog => dialog.id === /** @type {?} */parent.id) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatDialogModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatDialogModule, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };\n//# sourceMappingURL=dialog.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}