{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, NgZone, Optional, Output, ViewChild, ViewContainerRef, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { DOWN_ARROW, END, ENTER, ESCAPE, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { take } from 'rxjs/operators/take';\nimport { Subject } from 'rxjs/Subject';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { filter } from 'rxjs/operators/filter';\nimport { Subscription } from 'rxjs/Subscription';\nimport { merge } from 'rxjs/observable/merge';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { of } from 'rxjs/observable/of';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n  return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` + `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` + `custom implementation.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Datepicker data that requires internationalization.\n */\nclass MatDatepickerIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * A label for the calendar popup (used by screen readers).\n     */\n    this.calendarLabel = 'Calendar';\n    /**\n     * A label for the button used to open the calendar popup (used by screen readers).\n     */\n    this.openCalendarLabel = 'Open calendar';\n    /**\n     * A label for the previous month button (used by screen readers).\n     */\n    this.prevMonthLabel = 'Previous month';\n    /**\n     * A label for the next month button (used by screen readers).\n     */\n    this.nextMonthLabel = 'Next month';\n    /**\n     * A label for the previous year button (used by screen readers).\n     */\n    this.prevYearLabel = 'Previous year';\n    /**\n     * A label for the next year button (used by screen readers).\n     */\n    this.nextYearLabel = 'Next year';\n    /**\n     * A label for the previous multi-year button (used by screen readers).\n     */\n    this.prevMultiYearLabel = 'Previous 20 years';\n    /**\n     * A label for the next multi-year button (used by screen readers).\n     */\n    this.nextMultiYearLabel = 'Next 20 years';\n    /**\n     * A label for the 'switch to month view' button (used by screen readers).\n     */\n    this.switchToMonthViewLabel = 'Choose date';\n    /**\n     * A label for the 'switch to year view' button (used by screen readers).\n     */\n    this.switchToMultiYearViewLabel = 'Choose month and year';\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nclass MatCalendarCell {\n  /**\n   * @param {?} value\n   * @param {?} displayValue\n   * @param {?} ariaLabel\n   * @param {?} enabled\n   */\n  constructor(value, displayValue, ariaLabel, enabled) {\n    this.value = value;\n    this.displayValue = displayValue;\n    this.ariaLabel = ariaLabel;\n    this.enabled = enabled;\n  }\n}\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nclass MatCalendarBody {\n  constructor() {\n    /**\n     * The number of columns in the table.\n     */\n    this.numCols = 7;\n    /**\n     * Whether to allow selection of disabled cells.\n     */\n    this.allowDisabledSelection = false;\n    /**\n     * The cell number of the active cell in the table.\n     */\n    this.activeCell = 0;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    this.cellAspectRatio = 1;\n    /**\n     * Emits when a new value is selected.\n     */\n    this.selectedValueChange = new EventEmitter();\n  }\n  /**\n   * @param {?} cell\n   * @return {?}\n   */\n  _cellClicked(cell) {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n  /**\n   * The number of blank cells to put at the beginning for the first row.\n   * @return {?}\n   */\n  get _firstRowOffset() {\n    return this.rows && this.rows.length && this.rows[0].length ? this.numCols - this.rows[0].length : 0;\n  }\n  /**\n   * @param {?} rowIndex\n   * @param {?} colIndex\n   * @return {?}\n   */\n  _isActiveCell(rowIndex, colIndex) {\n    let /** @type {?} */cellNumber = rowIndex * this.numCols + colIndex;\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n    return cellNumber == this.activeCell;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nconst DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMonthView {\n  /**\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_dateAdapter, _dateFormats, _changeDetectorRef) {\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Emits when a new date is selected.\n     */\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n    this._userSelection = new EventEmitter();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    const /** @type {?} */firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const /** @type {?} */narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const /** @type {?} */longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let /** @type {?} */weekdays = longWeekdays.map((long, i) => {\n      return {\n        long,\n        narrow: narrowWeekdays[i]\n      };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    let /** @type {?} */oldActiveDate = this._activeDate;\n    this._activeDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._init();\n  }\n  /**\n   * Handles when a new date is selected.\n   * @param {?} date\n   * @return {?}\n   */\n  _dateSelected(date) {\n    if (this._selectedDate != date) {\n      const /** @type {?} */selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const /** @type {?} */selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const /** @type {?} */selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n      this.selectedChange.emit(selectedDate);\n    }\n    this._userSelection.emit();\n  }\n  /**\n   * Initializes this month view.\n   * @return {?}\n   */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n    let /** @type {?} */firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Creates MatCalendarCells for the dates in this month.\n   * @return {?}\n   */\n  _createWeekCells() {\n    const /** @type {?} */daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const /** @type {?} */dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */i = 0, /** @type {?} */cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const /** @type {?} */date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const /** @type {?} */enabled = this._shouldEnableDate(date);\n      const /** @type {?} */ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n  /**\n   * Date filter for the month\n   * @param {?} date\n   * @return {?}\n   */\n  _shouldEnableDate(date) {\n    return !!date && (!this.dateFilter || this.dateFilter(date)) && (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   * @param {?} date\n   * @return {?}\n   */\n  _getDateInCurrentMonth(date) {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n  }\n  /**\n   * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n   * @param {?} d1\n   * @param {?} d2\n   * @return {?}\n   */\n  _hasSameMonthAndYear(d1, d2) {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) && this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n  /**\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nconst yearsPerPage = 24;\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMultiYearView {\n  /**\n   * @param {?} _dateAdapter\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_dateAdapter, _changeDetectorRef) {\n    this._dateAdapter = _dateAdapter;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Emits when a new month is selected.\n     */\n    this.selectedChange = new EventEmitter();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this multi-year view (everything other than the year is ignored).\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    let /** @type {?} */oldActiveDate = this._activeDate;\n    this._activeDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) != Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._init();\n  }\n  /**\n   * Initializes this multi-year view.\n   * @return {?}\n   */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let /** @type {?} */activeYear = this._dateAdapter.getYear(this._activeDate);\n    let /** @type {?} */activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let /** @type {?} */i = 0, /** @type {?} */row = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Handles when a new year is selected.\n   * @param {?} year\n   * @return {?}\n   */\n  _yearSelected(year) {\n    let /** @type {?} */month = this._dateAdapter.getMonth(this.activeDate);\n    let /** @type {?} */daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n  /**\n   * @return {?}\n   */\n  _getActiveCell() {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n  /**\n   * Creates an MatCalendarCell for the given year.\n   * @param {?} year\n   * @return {?}\n   */\n  _createCellForYear(year) {\n    let /** @type {?} */yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n  /**\n   * Whether the given year is enabled.\n   * @param {?} year\n   * @return {?}\n   */\n  _shouldEnableYear(year) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null || this.maxDate && year > this._dateAdapter.getYear(this.maxDate) || this.minDate && year < this._dateAdapter.getYear(this.minDate)) {\n      return false;\n    }\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n    const /** @type {?} */firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n    // If any date in the year is enabled count the year as enabled.\n    for (let /** @type {?} */date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatYearView {\n  /**\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_dateAdapter, _dateFormats, _changeDetectorRef) {\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Emits when a new month is selected.\n     */\n    this.selectedChange = new EventEmitter();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this year view (everything other than the year is ignored).\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    let /** @type {?} */oldActiveDate = this._activeDate;\n    this._activeDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._init();\n  }\n  /**\n   * Handles when a new month is selected.\n   * @param {?} month\n   * @return {?}\n   */\n  _monthSelected(month) {\n    let /** @type {?} */daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n  /**\n   * Initializes this year view.\n   * @return {?}\n   */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n    let /** @type {?} */monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   * @param {?} date\n   * @return {?}\n   */\n  _getMonthInCurrentYear(date) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;\n  }\n  /**\n   * Creates an MatCalendarCell for the given month.\n   * @param {?} month\n   * @param {?} monthName\n   * @return {?}\n   */\n  _createCellForMonth(month, monthName) {\n    let /** @type {?} */ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n  /**\n   * Whether the given month is enabled.\n   * @param {?} month\n   * @return {?}\n   */\n  _shouldEnableMonth(month) {\n    const /** @type {?} */activeYear = this._dateAdapter.getYear(this.activeDate);\n    if (month === undefined || month === null || this._isYearAndMonthAfterMaxDate(activeYear, month) || this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n    if (!this.dateFilter) {\n      return true;\n    }\n    const /** @type {?} */firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   * @param {?} year\n   * @param {?} month\n   * @return {?}\n   */\n  _isYearAndMonthAfterMaxDate(year, month) {\n    if (this.maxDate) {\n      const /** @type {?} */maxYear = this._dateAdapter.getYear(this.maxDate);\n      const /** @type {?} */maxMonth = this._dateAdapter.getMonth(this.maxDate);\n      return year > maxYear || year === maxYear && month > maxMonth;\n    }\n    return false;\n  }\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   * @param {?} year\n   * @param {?} month\n   * @return {?}\n   */\n  _isYearAndMonthBeforeMinDate(year, month) {\n    if (this.minDate) {\n      const /** @type {?} */minYear = this._dateAdapter.getYear(this.minDate);\n      const /** @type {?} */minMonth = this._dateAdapter.getMonth(this.minDate);\n      return year < minYear || year === minYear && month < minMonth;\n    }\n    return false;\n  }\n  /**\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatCalendar {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _intl\n   * @param {?} _ngZone\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} changeDetectorRef\n   * @param {?=} _dir\n   */\n  constructor(_elementRef, _intl, _ngZone, _dateAdapter, _dateFormats, changeDetectorRef, _dir) {\n    this._elementRef = _elementRef;\n    this._intl = _intl;\n    this._ngZone = _ngZone;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._dir = _dir;\n    /**\n     * Whether the calendar should be started in month or year view.\n     */\n    this.startView = 'month';\n    /**\n     * Emits when the currently selected date changes.\n     */\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n    this._userSelection = new EventEmitter();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n  /**\n   * A date representing the period (month or year) to start the calendar in.\n   * @return {?}\n   */\n  get startAt() {\n    return this._startAt;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set startAt(value) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   * @return {?}\n   */\n  get _activeDate() {\n    return this._clampedActiveDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set _activeDate(value) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  /**\n   * The label for the current calendar view.\n   * @return {?}\n   */\n  get _periodButtonText() {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const /** @type {?} */activeYear = this._dateAdapter.getYear(this._activeDate);\n    const /** @type {?} */firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const /** @type {?} */lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n  /**\n   * @return {?}\n   */\n  get _periodButtonLabel() {\n    return this._currentView == 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n  /**\n   * The label for the the previous button.\n   * @return {?}\n   */\n  get _prevButtonLabel() {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n  /**\n   * The label for the the next button.\n   * @return {?}\n   */\n  get _nextButtonLabel() {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    const /** @type {?} */change = changes[\"minDate\"] || changes[\"maxDate\"] || changes[\"dateFilter\"];\n    if (change && !change.firstChange) {\n      const /** @type {?} */view = this.monthView || this.yearView || this.multiYearView;\n      if (view) {\n        view._init();\n      }\n    }\n  }\n  /**\n   * Handles date selection in the month view.\n   * @param {?} date\n   * @return {?}\n   */\n  _dateSelected(date) {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _userSelected() {\n    this._userSelection.emit();\n  }\n  /**\n   * Handles month selection in the multi-year view.\n   * @param {?} date\n   * @param {?} view\n   * @return {?}\n   */\n  _goToDateInView(date, view) {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n  /**\n   * Handles user clicks on the period label.\n   * @return {?}\n   */\n  _currentPeriodClicked() {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n  /**\n   * Handles user clicks on the previous button.\n   * @return {?}\n   */\n  _previousClicked() {\n    this._activeDate = this._currentView == 'month' ? this._dateAdapter.addCalendarMonths(this._activeDate, -1) : this._dateAdapter.addCalendarYears(this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n  /**\n   * Handles user clicks on the next button.\n   * @return {?}\n   */\n  _nextClicked() {\n    this._activeDate = this._currentView == 'month' ? this._dateAdapter.addCalendarMonths(this._activeDate, 1) : this._dateAdapter.addCalendarYears(this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n  /**\n   * Whether the previous period button is enabled.\n   * @return {?}\n   */\n  _previousEnabled() {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n  /**\n   * Whether the next period button is enabled.\n   * @return {?}\n   */\n  _nextEnabled() {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n  /**\n   * Handles keydown events on the calendar body.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleCalendarBodyKeydown(event) {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n  /**\n   * Focuses the active cell after the microtask queue is empty.\n   * @return {?}\n   */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n  /**\n   * Whether the two dates represent the same view in the current view mode (month or year).\n   * @param {?} date1\n   * @param {?} date2\n   * @return {?}\n   */\n  _isSameView(date1, date2) {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) == Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n  /**\n   * Handles keydown events on the calendar body when calendar is in month view.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleCalendarBodyKeydownInMonthView(event) {\n    const /** @type {?} */isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /**\n   * Handles keydown events on the calendar body when calendar is in year view.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleCalendarBodyKeydownInYearView(event) {\n    const /** @type {?} */isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /**\n   * Handles keydown events on the calendar body when calendar is in multi-year view.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleCalendarBodyKeydownInMultiYearView(event) {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /**\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n  /**\n   * Determines whether the user has the RTL layout direction.\n   * @return {?}\n   */\n  _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\nclass MatDatepickerContent {\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\nclass MatDatepicker {\n  /**\n   * @param {?} _dialog\n   * @param {?} _overlay\n   * @param {?} _ngZone\n   * @param {?} _viewContainerRef\n   * @param {?} _scrollStrategy\n   * @param {?} _dateAdapter\n   * @param {?} _dir\n   * @param {?} _document\n   */\n  constructor(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._scrollStrategy = _scrollStrategy;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    this._document = _document;\n    /**\n     * The view that the calendar should start in.\n     */\n    this.startView = 'month';\n    this._touchUi = false;\n    /**\n     * Emits new selected date when selected date changes.\n     * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n     * \\@deletion-target 6.0.0\n     */\n    this.selectedChanged = new EventEmitter();\n    /**\n     * Emits when the datepicker has been opened.\n     */\n    this.openedStream = new EventEmitter();\n    /**\n     * Emits when the datepicker has been closed.\n     */\n    this.closedStream = new EventEmitter();\n    this._opened = false;\n    /**\n     * The id for the datepicker calendar.\n     */\n    this.id = `mat-datepicker-${datepickerUid++}`;\n    this._validSelected = null;\n    /**\n     * The element that was focused before the datepicker was opened.\n     */\n    this._focusedElementBeforeOpen = null;\n    this._inputSubscription = Subscription.EMPTY;\n    /**\n     * Emits when the datepicker is disabled.\n     */\n    this._disabledChange = new Subject();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n  /**\n   * The date to open the calendar to initially.\n   * @return {?}\n   */\n  get startAt() {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set startAt(value) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   * @return {?}\n   */\n  get touchUi() {\n    return this._touchUi;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set touchUi(value) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the datepicker pop-up should be disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled === undefined && this._datepickerInput ? this._datepickerInput.disabled : !!this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    const /** @type {?} */newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  /**\n   * Whether the calendar is open.\n   * @return {?}\n   */\n  get opened() {\n    return this._opened;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set opened(value) {\n    value ? this.open() : this.close();\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get _selected() {\n    return this._validSelected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set _selected(value) {\n    this._validSelected = value;\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get _minDate() {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get _maxDate() {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n  /**\n   * @return {?}\n   */\n  get _dateFilter() {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n  /**\n   * Selects the given date\n   * @param {?} date\n   * @return {?}\n   */\n  _select(date) {\n    let /** @type {?} */oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n  /**\n   * Register an input with this datepicker.\n   * @param {?} input The datepicker input to register with this datepicker.\n   * @return {?}\n   */\n  _registerInput(input) {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription = this._datepickerInput._valueChange.subscribe(value => this._selected = value);\n  }\n  /**\n   * Open the calendar.\n   * @return {?}\n   */\n  open() {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n  /**\n   * Close the calendar.\n   * @return {?}\n   */\n  close() {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    const /** @type {?} */completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n    if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n  /**\n   * Open the calendar as a dialog.\n   * @return {?}\n   */\n  _openAsDialog() {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog'\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n  /**\n   * Open the calendar as a popup.\n   * @return {?}\n   */\n  _openAsPopup() {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */componentRef = this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n  /**\n   * Create the popup.\n   * @return {?}\n   */\n  _createPopup() {\n    const /** @type {?} */overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup'\n    });\n    this._popupRef = this._overlay.create(overlayConfig);\n    merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))).subscribe(() => this.close());\n  }\n  /**\n   * Create the popup PositionStrategy.\n   * @return {?}\n   */\n  _createPopupPositionStrategy() {\n    const /** @type {?} */fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n    return this._overlay.position().connectedTo(this._datepickerInput.getPopupConnectionElementRef(), {\n      originX: 'start',\n      originY: 'bottom'\n    }, {\n      overlayX: 'start',\n      overlayY: 'top'\n    }).withFallbackPosition({\n      originX: 'start',\n      originY: 'top'\n    }, {\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }, undefined, fallbackOffset).withFallbackPosition({\n      originX: 'end',\n      originY: 'bottom'\n    }, {\n      overlayX: 'end',\n      overlayY: 'top'\n    }).withFallbackPosition({\n      originX: 'end',\n      originY: 'top'\n    }, {\n      overlayX: 'end',\n      overlayY: 'bottom'\n    }, undefined, fallbackOffset);\n  }\n  /**\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\nconst MAT_DATEPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nclass MatDatepickerInputEvent {\n  /**\n   * @param {?} target\n   * @param {?} targetElement\n   */\n  constructor(target, targetElement) {\n    this.target = target;\n    this.targetElement = targetElement;\n    this.value = this.target.value;\n  }\n}\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\nclass MatDatepickerInput {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _formField\n   */\n  constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {\n    this._elementRef = _elementRef;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._formField = _formField;\n    /**\n     * Emits when a `change` event is fired on this `<input>`.\n     */\n    this.dateChange = new EventEmitter();\n    /**\n     * Emits when an `input` event is fired on this `<input>`.\n     */\n    this.dateInput = new EventEmitter();\n    /**\n     * Emits when the value changes (either due to user input or programmatic change).\n     */\n    this._valueChange = new EventEmitter();\n    /**\n     * Emits when the disabled state has changed\n     */\n    this._disabledChange = new EventEmitter();\n    this._onTouched = () => {};\n    this._cvaOnChange = () => {};\n    this._validatorOnChange = () => {};\n    this._datepickerSubscription = Subscription.EMPTY;\n    this._localeSubscription = Subscription.EMPTY;\n    /**\n     * The form control validator for whether the input parses.\n     */\n    this._parseValidator = () => {\n      return this._lastValueValid ? null : {\n        'matDatepickerParse': {\n          'text': this._elementRef.nativeElement.value\n        }\n      };\n    };\n    /**\n     * The form control validator for the min date.\n     */\n    this._minValidator = control => {\n      const /** @type {?} */controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !this.min || !controlValue || this._dateAdapter.compareDate(this.min, controlValue) <= 0 ? null : {\n        'matDatepickerMin': {\n          'min': this.min,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * The form control validator for the max date.\n     */\n    this._maxValidator = control => {\n      const /** @type {?} */controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !this.max || !controlValue || this._dateAdapter.compareDate(this.max, controlValue) >= 0 ? null : {\n        'matDatepickerMax': {\n          'max': this.max,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * The form control validator for the date filter.\n     */\n    this._filterValidator = control => {\n      const /** @type {?} */controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ? null : {\n        'matDatepickerFilter': true\n      };\n    };\n    /**\n     * The combined form control validator for this input.\n     */\n    this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n    /**\n     * Whether the last value set on the input was valid.\n     */\n    this._lastValueValid = false;\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n  /**\n   * The datepicker that this input is associated with.\n   * @param {?} value\n   * @return {?}\n   */\n  set matDatepicker(value) {\n    this.registerDatepicker(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  registerDatepicker(value) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  /**\n   * Function that can be used to filter out dates within the datepicker.\n   * @param {?} value\n   * @return {?}\n   */\n  set matDatepickerFilter(value) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  /**\n   * The value of the input.\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let /** @type {?} */oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value = value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  /**\n   * The minimum valid date.\n   * @return {?}\n   */\n  get min() {\n    return this._min;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set min(value) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  /**\n   * The maximum valid date.\n   * @return {?}\n   */\n  get max() {\n    return this._max;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set max(value) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  /**\n   * Whether the datepicker-input is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return !!this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    const /** @type {?} */newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker.selectedChanged.subscribe(selected => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n  /**\n   * \\@docs-private\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnValidatorChange(fn) {\n    this._validatorOnChange = fn;\n  }\n  /**\n   * \\@docs-private\n   * @param {?} c\n   * @return {?}\n   */\n  validate(c) {\n    return this._validator ? this._validator(c) : null;\n  }\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return {?} The element to connect the popup to.\n   */\n  getPopupConnectionElementRef() {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   * @return {?}\n   */\n  _getPopupFallbackOffset() {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.value = value;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._cvaOnChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onKeydown(event) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  _onInput(value) {\n    let /** @type {?} */date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n  /**\n   * @return {?}\n   */\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n  /**\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\nclass MatDatepickerToggleIcon {}\n\n/** @nocollapse */\n\n/**\n * @template D\n */\nclass MatDatepickerToggle {\n  /**\n   * @param {?} _intl\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_intl, _changeDetectorRef) {\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._stateChanges = Subscription.EMPTY;\n  }\n  /**\n   * Whether the toggle button is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (changes[\"datepicker\"]) {\n      this._watchStateChanges();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _open(event) {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _watchStateChanges() {\n    const /** @type {?} */datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n    const /** @type {?} */inputDisabled = this.datepicker && this.datepicker._datepickerInput ? this.datepicker._datepickerInput._disabledChange : of();\n    const /** @type {?} */datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatDatepickerModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatDatepickerModule, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER, MatDatepickerContent, MatDatepicker, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView, MatMultiYearView as ɵa31 };\n//# sourceMappingURL=datepicker.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}