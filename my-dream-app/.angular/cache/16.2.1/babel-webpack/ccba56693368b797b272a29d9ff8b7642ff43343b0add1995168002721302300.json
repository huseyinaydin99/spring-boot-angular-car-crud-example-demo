{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Injectable, Input, NgModule, Optional, Output, SkipSelf, ViewEncapsulation } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs/Subject';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * A label for the page size selector.\n     */\n    this.itemsPerPageLabel = 'Items per page:';\n    /**\n     * A label for the button that increments the current page.\n     */\n    this.nextPageLabel = 'Next page';\n    /**\n     * A label for the button that decrements the current page.\n     */\n    this.previousPageLabel = 'Previous page';\n    /**\n     * A label for the button that moves to the first page.\n     */\n    this.firstPageLabel = 'First page';\n    /**\n     * A label for the button that moves to the last page.\n     */\n    this.lastPageLabel = 'Last page';\n    /**\n     * A label for the range of items within the current page and the length of the whole list.\n     */\n    this.getRangeLabel = (page, pageSize, length) => {\n      if (length == 0 || pageSize == 0) {\n        return `0 of ${length}`;\n      }\n      length = Math.max(length, 0);\n      const /** @type {?} */startIndex = page * pageSize;\n      // If the start index exceeds the list length, do not try and fix the end index to the end.\n      const /** @type {?} */endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n      return `${startIndex + 1} - ${endIndex} of ${length}`;\n    };\n  }\n}\n\n/** @nocollapse */\n\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n/**\n * \\@docs-private\n */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The default page size if there is no page size and there are no provided page size options.\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {}\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator {\n  /**\n   * @param {?} _intl\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_intl, _changeDetectorRef) {\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._pageIndex = 0;\n    this._length = 0;\n    this._pageSizeOptions = [];\n    this._hidePageSize = false;\n    this._showFirstLastButtons = false;\n    /**\n     * Event emitted when the paginator changes the page size or page index.\n     */\n    this.page = new EventEmitter();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n  /**\n   * The zero-based page index of the displayed list of items. Defaulted to 0.\n   * @return {?}\n   */\n  get pageIndex() {\n    return this._pageIndex;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set pageIndex(value) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * The length of the total number of items that are being paginated. Defaulted to 0.\n   * @return {?}\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set length(value) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Number of items to display on a page. By default set to 50.\n   * @return {?}\n   */\n  get pageSize() {\n    return this._pageSize;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set pageSize(value) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  /**\n   * The set of provided page size options to display to the user.\n   * @return {?}\n   */\n  get pageSizeOptions() {\n    return this._pageSizeOptions;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set pageSizeOptions(value) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  /**\n   * Whether to hide the page size selection UI from the user.\n   * @return {?}\n   */\n  get hidePageSize() {\n    return this._hidePageSize;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set hidePageSize(value) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether to show the first/last buttons UI to the user.\n   * @return {?}\n   */\n  get showFirstLastButtons() {\n    return this._showFirstLastButtons;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set showFirstLastButtons(value) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n  /**\n   * Advances to the next page if it exists.\n   * @return {?}\n   */\n  nextPage() {\n    if (!this.hasNextPage()) {\n      return;\n    }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n  /**\n   * Move back to the previous page if it exists.\n   * @return {?}\n   */\n  previousPage() {\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n  /**\n   * Move to the first page if not already there.\n   * @return {?}\n   */\n  firstPage() {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n  /**\n   * Move to the last page if not already there.\n   * @return {?}\n   */\n  lastPage() {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) {\n      return;\n    }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n  /**\n   * Whether there is a previous page.\n   * @return {?}\n   */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n  /**\n   * Whether there is a next page.\n   * @return {?}\n   */\n  hasNextPage() {\n    const /** @type {?} */numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n  /**\n   * Calculate the number of pages\n   * @return {?}\n   */\n  getNumberOfPages() {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   * @param {?} pageSize\n   * @return {?}\n   */\n  _changePageSize(pageSize) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   * @return {?}\n   */\n  _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) {\n      return;\n    }\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n    }\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Emits an event notifying that a change of the paginator's properties has been triggered.\n   * @return {?}\n   */\n  _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatPaginatorModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatPaginatorModule, PageEvent, MatPaginator, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MAT_PAGINATOR_INTL_PROVIDER };\n//# sourceMappingURL=paginator.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}