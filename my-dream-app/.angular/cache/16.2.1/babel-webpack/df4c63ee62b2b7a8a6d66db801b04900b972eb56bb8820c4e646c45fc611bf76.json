{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Optional, Output } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc');\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n  /**\n   * @param {?=} _document\n   */\n  constructor(_document) {\n    /**\n     * The current 'ltr' or 'rtl' value.\n     */\n    this.value = 'ltr';\n    /**\n     * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n     */\n    this.change = new EventEmitter();\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const /** @type {?} */bodyDir = _document.body ? _document.body.dir : null;\n      const /** @type {?} */htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = /** @type {?} */bodyDir || htmlDir || 'ltr';\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n  constructor() {\n    this._dir = 'ltr';\n    /**\n     * Whether the `value` has been set to its initial value.\n     */\n    this._isInitialized = false;\n    /**\n     * Event emitted when the direction changes.\n     */\n    this.change = new EventEmitter();\n  }\n  /**\n   * \\@docs-private\n   * @return {?}\n   */\n  get dir() {\n    return this._dir;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set dir(v) {\n    const /** @type {?} */old = this._dir;\n    this._dir = v;\n    if (old !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n  /**\n   * Current layout direction of the element.\n   * @return {?}\n   */\n  get value() {\n    return this.dir;\n  }\n  /**\n   * Initialize once default value has been set.\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass BidiModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { Directionality, DIR_DOCUMENT, Dir, BidiModule };\n//# sourceMappingURL=bidi.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}