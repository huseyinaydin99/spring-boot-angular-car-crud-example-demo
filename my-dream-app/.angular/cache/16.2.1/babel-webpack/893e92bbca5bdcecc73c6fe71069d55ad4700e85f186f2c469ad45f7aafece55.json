{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ElementRef, Input, NgModule, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule, mixinColor } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatProgressBarBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Counter used to generate unique IDs for progress bars.\n */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarMixinBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._value = 0;\n    this._bufferValue = 0;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n    this.mode = 'determinate';\n    /**\n     * The id of the progress bar.\n     */\n    this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n  }\n  /**\n   * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set value(v) {\n    this._value = clamp(v || 0);\n  }\n  /**\n   * Buffer value of the progress bar. Defaults to zero.\n   * @return {?}\n   */\n  get bufferValue() {\n    return this._bufferValue;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set bufferValue(v) {\n    this._bufferValue = clamp(v || 0);\n  }\n  /**\n   * Gets the current transform value for the progress bar's primary indicator.\n   * @return {?}\n   */\n  _primaryTransform() {\n    const /** @type {?} */scale = this.value / 100;\n    return {\n      transform: `scaleX(${scale})`\n    };\n  }\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   * @return {?}\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const /** @type {?} */scale = this.bufferValue / 100;\n      return {\n        transform: `scaleX(${scale})`\n      };\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatProgressBarModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatProgressBarModule, MatProgressBarBase, _MatProgressBarMixinBase, MatProgressBar };\n//# sourceMappingURL=progress-bar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}