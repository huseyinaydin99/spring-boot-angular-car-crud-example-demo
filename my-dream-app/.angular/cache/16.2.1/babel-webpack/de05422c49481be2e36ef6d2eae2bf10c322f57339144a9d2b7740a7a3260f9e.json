{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Inject, Injectable, InjectionToken, Injector, NgModule, NgZone, Optional, SkipSelf, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, PortalModule } from '@angular/cdk/portal';\nimport { LIVE_ANNOUNCER_PROVIDER, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints, LayoutModule } from '@angular/cdk/layout';\nimport { AnimationCurves, AnimationDurations, MatCommonModule } from '@angular/material/core';\nimport { take } from 'rxjs/operators/take';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { Subject } from 'rxjs/Subject';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Event that is emitted when a snack bar is dismissed.\n * @record\n */\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   */\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     */\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     */\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     */\n    this._onAction = new Subject();\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     */\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /**\n   * Dismisses the snack bar.\n   * @return {?}\n   */\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @return {?}\n   */\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * \\@deletion-target 7.0.0\n   * @return {?}\n   */\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /**\n   * Dismisses the snack bar after some duration\n   * @param {?} duration\n   * @return {?}\n   */\n  _dismissAfter(duration) {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n  /**\n   * Marks the snackbar as opened\n   * @return {?}\n   */\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n  /**\n   * Cleans up the DOM after closing.\n   * @return {?}\n   */\n  _finishDismiss() {\n    this._overlayRef.dispose();\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar is finished closing.\n   * @return {?}\n   */\n  afterDismissed() {\n    return this._afterDismissed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the snack bar has opened and appeared.\n   * @return {?}\n   */\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar action is called.\n   * @return {?}\n   */\n  onAction() {\n    return this._onAction.asObservable();\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n  constructor() {\n    /**\n     * The politeness level for the MatAriaLiveAnnouncer announcement.\n     */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the MatAriaLiveAnnouncer\n     */\n    this.announcementMessage = '';\n    /**\n     * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n     */\n    this.duration = 0;\n    /**\n     * Text layout direction for the snack bar.\n     */\n    this.direction = 'ltr';\n    /**\n     * Data being injected into the child component.\n     */\n    this.data = null;\n    /**\n     * The horizontal position to place the snack bar.\n     */\n    this.horizontalPosition = 'center';\n    /**\n     * The vertical position to place the snack bar.\n     */\n    this.verticalPosition = 'bottom';\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nconst SHOW_ANIMATION = `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n/**\n * \\@docs-private\n */\nconst HIDE_ANIMATION = `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n/**\n * Animations used by the Material snack bar.\n */\nconst matSnackBarAnimations = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [transition(':enter', [style({\n    opacity: '0'\n  }), animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)])]),\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('visible-top, visible-bottom', style({\n    transform: 'translateY(0%)'\n  })), transition('visible-top => hidden-top, visible-bottom => hidden-bottom', animate(HIDE_ANIMATION)), transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n  /**\n   * @param {?} snackBarRef\n   * @param {?} data\n   */\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /**\n   * Performs the action on the snack bar.\n   * @return {?}\n   */\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /**\n   * If the action button should be shown.\n   * @return {?}\n   */\n  get hasAction() {\n    return !!this.data.action;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_ngZone, _elementRef, _changeDetectorRef) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Whether the component has been destroyed.\n     */\n    this._destroyed = false;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     */\n    this._onExit = new Subject();\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     */\n    this._onEnter = new Subject();\n    /**\n     * The state of the snack bar animations.\n     */\n    this._animationState = 'void';\n  }\n  /**\n   * Attach a component portal as content to this snack bar container.\n   * @template T\n   * @param {?} portal\n   * @return {?}\n   */\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n    const /** @type {?} */element = this._elementRef.nativeElement;\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a template portal as content to this snack bar container.\n   * @return {?}\n   */\n  attachTemplatePortal() {\n    throw Error('Not yet implemented');\n  }\n  /**\n   * Handle end of animations, updating the state of the snackbar.\n   * @param {?} event\n   * @return {?}\n   */\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n    if (toState === 'void' && fromState !== 'void' || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */onEnter = this._onEnter;\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /**\n   * Begin animation of snack bar entrance into view.\n   * @return {?}\n   */\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Begin animation of the snack bar exiting from view.\n   * @return {?}\n   */\n  exit() {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n  /**\n   * Makes sure the exit callbacks have been invoked when the element is destroyed.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   * @return {?}\n   */\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n  /**\n   * Applies the user-specified list of CSS classes to the element.\n   * @param {?} classList\n   * @return {?}\n   */\n  _setCssClasses(classList) {\n    if (!classList) {\n      return;\n    }\n    const /** @type {?} */element = this._elementRef.nativeElement;\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n  /**\n   * @param {?} _overlay\n   * @param {?} _live\n   * @param {?} _injector\n   * @param {?} _breakpointObserver\n   * @param {?} _parentSnackBar\n   */\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    this._snackBarRefAtThisLevel = null;\n  }\n  /**\n   * Reference to the currently opened snackbar at *any* level.\n   * @return {?}\n   */\n  get _openedSnackBarRef() {\n    const /** @type {?} */parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @template T\n   * @param {?} component Component to be instantiated.\n   * @param {?=} config Extra configuration for the snack bar.\n   * @return {?}\n   */\n  openFromComponent(component, config) {\n    const /** @type {?} */_config = _applyConfigDefaults(config);\n    const /** @type {?} */snackBarRef = this._attach(component, _config);\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */ /** @type {?} */_config.duration));\n    }\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param {?} message The message to show in the snackbar.\n   * @param {?=} action The label for the snackbar action.\n   * @param {?=} config Additional configuration options for the snackbar.\n   * @return {?}\n   */\n  open(message, action = '', config) {\n    const /** @type {?} */_config = _applyConfigDefaults(config);\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {\n      message,\n      action\n    };\n    _config.announcementMessage = message;\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   * @return {?}\n   */\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   * @param {?} overlayRef\n   * @param {?} config\n   * @return {?}\n   */\n  _attachSnackBarContainer(overlayRef, config) {\n    const /** @type {?} */containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component as the content of the snack bar container.\n   * @template T\n   * @param {?} component\n   * @param {?} config\n   * @return {?}\n   */\n  _attach(component, config) {\n    const /** @type {?} */overlayRef = this._createOverlay(config);\n    const /** @type {?} */container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */snackBarRef = new MatSnackBarRef(container, overlayRef);\n    const /** @type {?} */injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */contentRef = container.attachComponentPortal(portal);\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(state$$1 => {\n      if (state$$1.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n    return snackBarRef;\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param {?} config The user-specified snack bar config.\n   * @return {?}\n   */\n  _createOverlay(config) {\n    const /** @type {?} */overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n    let /** @type {?} */positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const /** @type {?} */isRtl = config.direction === 'rtl';\n    const /** @type {?} */isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    const /** @type {?} */isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @template T\n   * @param {?} config Config that was used to create the snack bar.\n   * @param {?} snackBarRef Reference to the snack bar.\n   * @return {?}\n   */\n  _createInjector(config, snackBarRef) {\n    const /** @type {?} */userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */injectionTokens = new WeakMap();\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config) {\n  return Object.assign({}, new MatSnackBarConfig(), config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatSnackBarModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatSnackBarModule, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, SHOW_ANIMATION, HIDE_ANIMATION, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}