{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CdkPortal, CdkPortalOutlet, PortalModule, TemplatePortal } from '@angular/cdk/portal';\nimport { ScrollDispatchModule, VIEWPORT_RULER_PROVIDER, ViewportRuler } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, Input, NgModule, NgZone, Optional, Output, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatRippleModule, RippleRenderer, mixinColor, mixinDisableRipple, mixinDisabled, mixinTabIndex } from '@angular/material/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subscription } from 'rxjs/Subscription';\nimport { merge } from 'rxjs/observable/merge';\nimport { END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\nimport { of } from 'rxjs/observable/of';\nimport { Platform } from '@angular/cdk/platform';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nclass MatInkBar {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  constructor(_elementRef, _ngZone) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n  }\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param {?} element\n   * @return {?}\n   */\n  alignToElement(element) {\n    this.show();\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n  /**\n   * Shows the ink bar.\n   * @return {?}\n   */\n  show() {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n  /**\n   * Hides the ink bar.\n   * @return {?}\n   */\n  hide() {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param {?} element\n   * @return {?}\n   */\n  _setStyles(element) {\n    const /** @type {?} */inkBar = this._elementRef.nativeElement;\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to flag tab labels for use with the portal directive\n */\nclass MatTabLabel extends CdkPortal {\n  /**\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   */\n  constructor(templateRef, viewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatTabBase {}\nconst _MatTabMixinBase = mixinDisabled(MatTabBase);\nclass MatTab extends _MatTabMixinBase {\n  /**\n   * @param {?} _viewContainerRef\n   */\n  constructor(_viewContainerRef) {\n    super();\n    this._viewContainerRef = _viewContainerRef;\n    /**\n     * The plain text label for the tab, used when there is no template label.\n     */\n    this.textLabel = '';\n    /**\n     * The portal that will be the hosted content of the tab\n     */\n    this._contentPortal = null;\n    /**\n     * Emits whenever the label changes.\n     */\n    this._labelChange = new Subject();\n    /**\n     * Emits whenever the disable changes\n     */\n    this._disableChange = new Subject();\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    this.position = null;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    this.origin = null;\n    /**\n     * Whether the tab is currently active.\n     */\n    this.isActive = false;\n  }\n  /**\n   * \\@docs-private\n   * @return {?}\n   */\n  get content() {\n    return this._contentPortal;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material tabs.\n */\nconst matTabsAnimations = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n  // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n  state('center, void, left-origin-center, right-origin-center', style({\n    transform: 'none'\n  })), state('left', style({\n    transform: 'translate3d(-100%, 0, 0)'\n  })), state('right', style({\n    transform: 'translate3d(100%, 0, 0)'\n  })), transition('* => left, * => right, left => center, right => center', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')), transition('void => left-origin-center', [style({\n    transform: 'translate3d(-100%, 0, 0)'\n  }), animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')]), transition('void => right-origin-center', [style({\n    transform: 'translate3d(100%, 0, 0)'\n  }), animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')])])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The portal host directive for the contents of the tab.\n * \\@docs-private\n */\nclass MatTabBodyPortal extends CdkPortalOutlet {\n  /**\n   * @param {?} _componentFactoryResolver\n   * @param {?} _viewContainerRef\n   * @param {?} _host\n   */\n  constructor(_componentFactoryResolver, _viewContainerRef, _host) {\n    super(_componentFactoryResolver, _viewContainerRef);\n    this._host = _host;\n  }\n  /**\n   * Set initial visibility or set up subscription for changing visibility.\n   * @return {?}\n   */\n  ngOnInit() {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe(isCentering => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n  /**\n   * Clean up centering subscription.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nclass MatTabBody {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _dir\n   */\n  constructor(_elementRef, _dir) {\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    /**\n     * Event emitted when the tab begins to animate towards the center as the active tab.\n     */\n    this._onCentering = new EventEmitter();\n    /**\n     * Event emitted before the centering of the tab begins.\n     */\n    this._beforeCentering = new EventEmitter();\n    /**\n     * Event emitted before the centering of the tab begins.\n     */\n    this._afterLeavingCenter = new EventEmitter();\n    /**\n     * Event emitted when the tab completes its animation towards the center.\n     */\n    this._onCentered = new EventEmitter(true);\n  }\n  /**\n   * The shifted index position of the tab body, where zero represents the active center tab.\n   * @param {?} position\n   * @return {?}\n   */\n  set position(position) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  /**\n   * The origin position from which this tab should appear when it is centered into view.\n   * @param {?} origin\n   * @return {?}\n   */\n  set origin(origin) {\n    if (origin == null) {\n      return;\n    }\n    const /** @type {?} */dir = this._getLayoutDirection();\n    if (dir == 'ltr' && origin <= 0 || dir == 'rtl' && origin > 0) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   * @return {?}\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n  /**\n   * @param {?} e\n   * @return {?}\n   */\n  _onTranslateTabStarted(e) {\n    const /** @type {?} */isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n  /**\n   * @param {?} e\n   * @return {?}\n   */\n  _onTranslateTabComplete(e) {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n  /**\n   * The text direction of the containing app.\n   * @return {?}\n   */\n  _getLayoutDirection() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /**\n   * Whether the provided position state is considered center, regardless of origin.\n   * @param {?} position\n   * @return {?}\n   */\n  _isCenterPosition(position) {\n    return position == 'center' || position == 'left-origin-center' || position == 'right-origin-center';\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nclass MatTabChangeEvent {}\n/**\n * \\@docs-private\n */\nclass MatTabGroupBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nclass MatTabGroup extends _MatTabGroupMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   */\n  constructor(elementRef, _changeDetectorRef) {\n    super(elementRef);\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * The tab index that should be selected after the content has been checked.\n     */\n    this._indexToSelect = 0;\n    /**\n     * Snapshot of the height of the tab body wrapper before another tab is activated.\n     */\n    this._tabBodyWrapperHeight = 0;\n    /**\n     * Subscription to tabs being added/removed.\n     */\n    this._tabsSubscription = Subscription.EMPTY;\n    /**\n     * Subscription to changes in the tab labels.\n     */\n    this._tabLabelSubscription = Subscription.EMPTY;\n    this._dynamicHeight = false;\n    this._selectedIndex = null;\n    /**\n     * Position of the tab header.\n     */\n    this.headerPosition = 'above';\n    /**\n     * Output to enable support for two-way binding on `[(selectedIndex)]`\n     */\n    this.selectedIndexChange = new EventEmitter();\n    /**\n     * Event emitted when focus has changed within a tab group.\n     */\n    this.focusChange = new EventEmitter();\n    /**\n     * Event emitted when the body animation has completed\n     */\n    this.animationDone = new EventEmitter();\n    /**\n     * Event emitted when the tab selection has changed.\n     */\n    this.selectedTabChange = new EventEmitter(true);\n    /**\n     * Event emitted when the tab selection has changed.\n     * @deprecated Use `selectedTabChange` instead.\n     * \\@deletion-target 6.0.0\n     */\n    this.selectChange = this.selectedTabChange;\n    this._groupId = nextId++;\n  }\n  /**\n   * Whether the tab group should grow to the size of the active tab.\n   * @return {?}\n   */\n  get dynamicHeight() {\n    return this._dynamicHeight;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set dynamicHeight(value) {\n    this._dynamicHeight = coerceBooleanProperty(value);\n  }\n  /**\n   * @deprecated\n   * \\@deletion-target 6.0.0\n   * @return {?}\n   */\n  get _dynamicHeightDeprecated() {\n    return this._dynamicHeight;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set _dynamicHeightDeprecated(value) {\n    this._dynamicHeight = value;\n  }\n  /**\n   * The index of the active tab.\n   * @return {?}\n   */\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selectedIndex(value) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  /**\n   * Background color of the tab group.\n   * @return {?}\n   */\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set backgroundColor(value) {\n    const /** @type {?} */nativeElement = this._elementRef.nativeElement;\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n    this._backgroundColor = value;\n  }\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */indexToSelect = this._indexToSelect = Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const /** @type {?} */tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab, index) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  _focusChanged(index) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  _createChangeEvent(index) {\n    const /** @type {?} */event = new MatTabChangeEvent();\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   * @return {?}\n   */\n  _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._disableChange), ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * Returns a unique id for each tab label element\n   * @param {?} i\n   * @return {?}\n   */\n  _getTabLabelId(i) {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n  /**\n   * Returns a unique id for each tab content element\n   * @param {?} i\n   * @return {?}\n   */\n  _getTabContentId(i) {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   * @param {?} tabHeight\n   * @return {?}\n   */\n  _setTabBodyWrapperHeight(tabHeight) {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n      return;\n    }\n    const /** @type {?} */wrapper = this._tabBodyWrapper.nativeElement;\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n  /**\n   * Removes the height of the tab body wrapper.\n   * @return {?}\n   */\n  _removeTabBodyWrapperHeight() {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n  /**\n   * Handle click events, setting new selected index if appropriate.\n   * @param {?} tab\n   * @param {?} tabHeader\n   * @param {?} idx\n   * @return {?}\n   */\n  _handleClick(tab, tabHeader, idx) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n  /**\n   * Retrieves the tabindex for the tab.\n   * @param {?} tab\n   * @param {?} idx\n   * @return {?}\n   */\n  _getTabIndex(tab, idx) {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * \\@docs-private\n */\nclass MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\n  /**\n   * @param {?} elementRef\n   */\n  constructor(elementRef) {\n    super();\n    this.elementRef = elementRef;\n  }\n  /**\n   * Sets focus on the wrapper element\n   * @return {?}\n   */\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n  /**\n   * @return {?}\n   */\n  getOffsetLeft() {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n  /**\n   * @return {?}\n   */\n  getOffsetWidth() {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nclass MatTabHeader extends _MatTabHeaderMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _viewportRuler\n   * @param {?} _dir\n   */\n  constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir) {\n    super();\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this._dir = _dir;\n    /**\n     * The tab index that is focused.\n     */\n    this._focusIndex = 0;\n    /**\n     * The distance in pixels that the tab labels should be translated to the left.\n     */\n    this._scrollDistance = 0;\n    /**\n     * Whether the header should scroll to the selected index after the view has been checked.\n     */\n    this._selectedIndexChanged = false;\n    /**\n     * Combines listeners that will re-align the ink bar whenever they're invoked.\n     */\n    this._realignInkBar = Subscription.EMPTY;\n    /**\n     * Whether the controls for pagination should be displayed\n     */\n    this._showPaginationControls = false;\n    /**\n     * Whether the tab list can be scrolled more towards the end of the tab label list.\n     */\n    this._disableScrollAfter = true;\n    /**\n     * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n     */\n    this._disableScrollBefore = true;\n    this._selectedIndex = 0;\n    /**\n     * Event emitted when the option is selected.\n     */\n    this.selectFocusedIndex = new EventEmitter();\n    /**\n     * Event emitted when a label is focused.\n     */\n    this.indexFocused = new EventEmitter();\n  }\n  /**\n   * The index of the active tab.\n   * @return {?}\n   */\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selectedIndex(value) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    const /** @type {?} */dirChange = this._dir ? this._dir.change : of(null);\n    const /** @type {?} */resize = this._viewportRuler.change(150);\n    const /** @type {?} */realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   * @return {?}\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Updating the view whether pagination should be enabled or not\n   * @return {?}\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n  /**\n   * When the focus index is set, we must manually send focus to the correct label\n   * @param {?} value\n   * @return {?}\n   */\n  set focusIndex(value) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) {\n      return;\n    }\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n  /**\n   * Tracks which element has focus; used for keyboard navigation\n   * @return {?}\n   */\n  get focusIndex() {\n    return this._focusIndex;\n  }\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   * @param {?} index\n   * @return {?}\n   */\n  _isValidIndex(index) {\n    if (!this._labelWrappers) {\n      return true;\n    }\n    const /** @type {?} */tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   * @param {?} tabIndex\n   * @return {?}\n   */\n  _setTabFocus(tabIndex) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   * @param {?} offset\n   * @return {?}\n   */\n  _moveFocus(offset) {\n    if (this._labelWrappers) {\n      const /** @type {?} */tabs = this._labelWrappers.toArray();\n      for (let /** @type {?} */i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n  /**\n   * Increment the focus index by 1 until a valid tab is found.\n   * @return {?}\n   */\n  _focusNextTab() {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n  /**\n   * Decrement the focus index by 1 until a valid tab is found.\n   * @return {?}\n   */\n  _focusPreviousTab() {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n  /**\n   * Focuses the first tab.\n   * @return {?}\n   */\n  _focusFirstTab() {\n    for (let /** @type {?} */i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n  /**\n   * Focuses the last tab.\n   * @return {?}\n   */\n  _focusLastTab() {\n    for (let /** @type {?} */i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n  /**\n   * The layout direction of the containing app.\n   * @return {?}\n   */\n  _getLayoutDirection() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /**\n   * Performs the CSS transformation on the tab list that will cause the list to scroll.\n   * @return {?}\n   */\n  _updateTabScrollPosition() {\n    const /** @type {?} */scrollDistance = this.scrollDistance;\n    const /** @type {?} */translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n  /**\n   * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n   * @return {?}\n   */\n  get scrollDistance() {\n    return this._scrollDistance;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set scrollDistance(v) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   * @param {?} scrollDir\n   * @return {?}\n   */\n  _scrollHeader(scrollDir) {\n    const /** @type {?} */viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   * @param {?} labelIndex\n   * @return {?}\n   */\n  _scrollToLabel(labelIndex) {\n    const /** @type {?} */selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n    if (!selectedLabel) {\n      return;\n    }\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    let /** @type {?} */labelBeforePos, /** @type {?} */labelAfterPos;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n    const /** @type {?} */beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */afterVisiblePos = this.scrollDistance + viewLength;\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   * @return {?}\n   */\n  _checkPaginationEnabled() {\n    const /** @type {?} */isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n    this._showPaginationControls = isEnabled;\n  }\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   * @return {?}\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   * @return {?}\n   */\n  _getMaxScrollDistance() {\n    const /** @type {?} */lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n  /**\n   * Tells the ink-bar to align itself to the current label wrapper\n   * @return {?}\n   */\n  _alignInkBarToSelectedTab() {\n    const /** @type {?} */selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement : null;\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatTabNavBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nclass MatTabNav extends _MatTabNavMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _dir\n   * @param {?} _ngZone\n   * @param {?} _changeDetectorRef\n   * @param {?} _viewportRuler\n   */\n  constructor(elementRef, _dir, _ngZone, _changeDetectorRef, _viewportRuler) {\n    super(elementRef);\n    this._dir = _dir;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n    this._onDestroy = new Subject();\n    this._disableRipple = false;\n  }\n  /**\n   * Background color of the tab nav.\n   * @return {?}\n   */\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set backgroundColor(value) {\n    const /** @type {?} */nativeElement = this._elementRef.nativeElement;\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n    this._backgroundColor = value;\n  }\n  /**\n   * Whether ripples should be disabled for all links or not.\n   * @return {?}\n   */\n  get disableRipple() {\n    return this._disableRipple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disableRipple(value) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  /**\n   * Notifies the component that the active link has been changed.\n   * @param {?} element\n   * @return {?}\n   */\n  updateActiveLink(element) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._ngZone.runOutsideAngular(() => {\n      const /** @type {?} */dirChange = this._dir ? this._dir.change : of(null);\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy)).subscribe(() => this._alignInkBar());\n    });\n    this._setLinkDisableRipple();\n  }\n  /**\n   * Checks if the active link has been changed and, if so, will update the ink bar.\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n  /**\n   * Aligns the ink bar to the active link.\n   * @return {?}\n   */\n  _alignInkBar() {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n  /**\n   * Sets the `disableRipple` property on each link of the navigation bar.\n   * @return {?}\n   */\n  _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n/** @nocollapse */\n\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nclass MatTabLink extends _MatTabLinkMixinBase {\n  /**\n   * @param {?} _tabNavBar\n   * @param {?} _elementRef\n   * @param {?} ngZone\n   * @param {?} platform\n   * @param {?} globalOptions\n   * @param {?} tabIndex\n   */\n  constructor(_tabNavBar, _elementRef, ngZone, platform, globalOptions, tabIndex) {\n    super();\n    this._tabNavBar = _tabNavBar;\n    this._elementRef = _elementRef;\n    /**\n     * Whether the tab link is active or not.\n     */\n    this._isActive = false;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * \\@docs-private\n     */\n    this.rippleConfig = {};\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.tabIndex = parseInt(tabIndex) || 0;\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation\n      };\n    }\n  }\n  /**\n   * Whether the link is active.\n   * @return {?}\n   */\n  get active() {\n    return this._isActive;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set active(value) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * \\@docs-private\n   * @return {?}\n   */\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nclass MatTabsModule {}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatInkBar, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, MatTabsModule, MatTabChangeEvent, MatTabGroupBase, _MatTabGroupMixinBase, MatTabGroup, matTabsAnimations, MatTabBase as ɵe22, _MatTabMixinBase as ɵf22, MatTabHeaderBase as ɵa22, _MatTabHeaderMixinBase as ɵb22, MatTabLabelWrapperBase as ɵc22, _MatTabLabelWrapperMixinBase as ɵd22, MatTabLinkBase as ɵi22, MatTabNavBase as ɵg22, _MatTabLinkMixinBase as ɵj22, _MatTabNavMixinBase as ɵh22 };\n//# sourceMappingURL=tabs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}